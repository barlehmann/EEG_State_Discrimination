{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install -U mne # with -U means latest STABLE version!\n",
    "#%matplotlib qt\n",
    "import os.path as op\n",
    "import os\n",
    "import numpy as np\n",
    "import mne\n",
    "from mne.time_frequency import tfr_morlet, psd_multitaper, psd_welch\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from pandas import ExcelWriter\n",
    "from pandas import ExcelFile\n",
    "from pydoc import help\n",
    "from scipy.stats.stats import pearsonr\n",
    "from scipy import linalg\n",
    "from mne import io\n",
    "from mne.connectivity import spectral_connectivity\n",
    "from mne.datasets import sample\n",
    "from mne.viz import plot_sensors_connectivity\n",
    "from entropy import *\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "#This class is for iterating through the raw data and extracting a set of 10 complexity features over a specified seconds_per_sample argument that sets how many seconds \n",
    "# (or samples) are fed into the complexity functions to be put into the final dataframe that will be analysed with later functions.\n",
    "class preprocess_raw:\n",
    "    def __init__(self, seconds_per_sample, filepath=r\"C:\\Users\\barle\\Downloads/AusEC.edf\"):\n",
    "        #For the filepath, it is for the raw data - one can use this as guideline for filepath on a windows pc: raw = mne.io.read_raw_edf(r\"C:\\Users\\barle\\Downloads/AusEC.edf\") \n",
    "        \n",
    "        #Creating basic variables to be used and accessed relating to raw data, its montage (channel settings), channel names, etc.\n",
    "        raw = mne.io.read_raw_edf(filepath)\n",
    "        data = raw.get_data()\n",
    "    \n",
    "        # Below are needed variables in order to streamline this preprocessing class to different EEG recording durations (in seconds)\n",
    "        # More specifically this ensures that feature extraction will be able to loop through a correct number of samples and that remainders \n",
    "        # will not cause any issues\n",
    "        sample_width = seconds_per_sample*raw.info['sfreq']\n",
    "        remainder = len(data.T[:,1])%sample_width\n",
    "        print(remainder)\n",
    "        final_num_samples = len(data.T[:,1]) - remainder \n",
    "        print(final_num_samples)\n",
    "        #CORRECT **NEW** SAMPLE NUMBER  = final_num_samples / sample_width\n",
    "        num_of_new_samples = final_num_samples/sample_width\n",
    "        new_total_duration_seconds = num_of_new_samples / raw.info['sfreq']\n",
    "        new_half_duration_seconds = new_total_duration_seconds / 2\n",
    "        \n",
    "        \n",
    "        # Setting the needed variables to segment two halfs of the data as sample_starts and sample_starts which designate the partitions of \n",
    "        # condition 1 and condition 2 and subsequently creating separate raw selections for designated channels and start and stop times\n",
    "        sampling_freq = raw.info['sfreq']\n",
    "        start_stop_seconds1 = np.array([0, ((len(raw)/sampling_freq)/2)]) #print(len(raw)) # = 92672 / 256 = 362 seconds total / 60  = 6 minutes\n",
    "        start_stop_seconds2 = np.array([((len(raw)/sampling_freq)/2),((len(raw)/sampling_freq))])\n",
    "        start_sample1, stop_sample1 = (start_stop_seconds1 * sampling_freq).astype(int)\n",
    "        start_sample2, stop_sample2 = (start_stop_seconds2 * sampling_freq).astype(int)\n",
    "        channel_index1 = 1\n",
    "        channel_index2 = 1\n",
    "        channel_index3 = 2\n",
    "        channel_index4 = 2\n",
    "        channel_index5 = 3\n",
    "        channel_index6 = 3\n",
    "        channel_index7 = 4\n",
    "        channel_index8 = 4\n",
    "        channel_index9 = 5\n",
    "        channel_index10 = 5\n",
    "        channel_index11= 11\n",
    "        channel_index12 = 11\n",
    "        channel_index13 = 12\n",
    "        channel_index14 = 12\n",
    "        raw_selection1 = data[channel_index1, start_sample1:stop_sample1]\n",
    "        raw_selection2 = data[channel_index2, start_sample2:stop_sample2]\n",
    "        raw_selection3 = data[channel_index3, start_sample1:stop_sample1]\n",
    "        raw_selection4 = data[channel_index4, start_sample1:stop_sample2]\n",
    "        raw_selection5 = data[channel_index5, start_sample1:stop_sample1]\n",
    "        raw_selection6 = data[channel_index6, start_sample1:stop_sample2]\n",
    "        raw_selection7 = data[channel_index7, start_sample1:stop_sample1]\n",
    "        raw_selection8 = data[channel_index8, start_sample1:stop_sample2]\n",
    "        raw_selection9 = data[channel_index9, start_sample1:stop_sample1]\n",
    "        raw_selection10 = data[channel_index10, start_sample1:stop_sample2]\n",
    "        raw_selection11 = data[channel_index11, start_sample1:stop_sample1]\n",
    "        raw_selection12 = data[channel_index12, start_sample1:stop_sample2]\n",
    "        raw_selection13 = data[channel_index13, start_sample1:stop_sample1]\n",
    "        raw_selection14 = data[channel_index14, start_sample1:stop_sample2]\n",
    "\n",
    "        #Below is a bit of additional output for the test file verifying that what is expected to be found has indeed been found related to \n",
    "        #the time durations of a dataset \n",
    "        #print(len(raw)) # = 92672 / 256 = 362 seconds total / 60  = 6 minutes\n",
    "        #print(len(data.T)) # = 92672 / 256 = 362 seconds total / 60  = 6 minutes\n",
    "        #print(len(data.T[:,1])) # = 92672 / 256 = 362 seconds total / 60  = 6 minutes\n",
    "\n",
    "        \n",
    "        \n",
    "        #INDICIES FOR OPTIMAL CHANNELS: 5=C3, 6=C4,7=P3,  8=P4, Fz=17, Cz=18, Pz=19\n",
    "        #These channels are optimal due to their being least likely to be contaminated with artifact\n",
    "\n",
    "\n",
    "        #Below are a set of loops for each channel and each condition which iterate through the sample width and extract the complexity data to create\n",
    "        #the new dataset/dataframe containing these features\n",
    "        #*********************************************************************C3*********************************************************************\n",
    "        nc3 = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection1[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #Below are a few commented commands that helped to test taht the function is working correctly - please ignore if not working on changing this loop \n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            nc3.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 5,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        nc3 = pd.DataFrame(nc3)\n",
    "        #print(pd.DataFrame(nc3))\n",
    "\n",
    "\n",
    "\n",
    "        mc3 = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection2[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mc3.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 5,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mc3 = pd.DataFrame(mc3)\n",
    "        #print(pd.DataFrame(mc3))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************C4*********************************************************************\n",
    "\n",
    "\n",
    "\n",
    "        nc4 = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection3[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            nc4.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 6,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        nc4=pd.DataFrame(nc4)\n",
    "        #print(pd.DataFrame(np3))\n",
    "\n",
    "\n",
    "\n",
    "        mc4 = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection4[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mc4.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 6,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mc4=pd.DataFrame(mc4)\n",
    "        #print(pd.DataFrame(mp3))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************P3*********************************************************************\n",
    "\n",
    "        np3 = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection5[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            np3.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 7,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        np3=pd.DataFrame(np3)\n",
    "        #print(pd.DataFrame(np3))\n",
    "\n",
    "\n",
    "\n",
    "        mp3 = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection6[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mp3.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 7,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mp3=pd.DataFrame(mp3)\n",
    "        #print(pd.DataFrame(mp3))\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************P4*********************************************************************\n",
    "\n",
    "        np4 = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection7[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            np4.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 8,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        np4=pd.DataFrame(np4)\n",
    "        #print(pd.DataFrame(np4))\n",
    "\n",
    "\n",
    "\n",
    "        mp4 = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection8[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mp4.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 8,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mp4=pd.DataFrame(mp4)\n",
    "        #print(pd.DataFrame(mp4))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************FZ*********************************************************************\n",
    "\n",
    "        nfz = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection9[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            nfz.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 17,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        nfz=pd.DataFrame(nfz)\n",
    "        #print(pd.DataFrame(nfz))\n",
    "\n",
    "\n",
    "\n",
    "        mfz = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection10[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mfz.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 17,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mfz=pd.DataFrame(mfz)\n",
    "        #print(pd.DataFrame(mfz))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************CZ*********************************************************************\n",
    "\n",
    "        ncz = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection11[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            ncz.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 18,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        ncz=pd.DataFrame(ncz)\n",
    "        #print(pd.DataFrame(ncz))\n",
    "\n",
    "\n",
    "\n",
    "        mcz = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection12[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mcz.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 18,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mcz=pd.DataFrame(mcz)\n",
    "        #print(pd.DataFrame(mcz))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************FZ*********************************************************************\n",
    "\n",
    "        npz = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection13[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            npz.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 19,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        npz=pd.DataFrame(npz)\n",
    "        #print(pd.DataFrame(npz))\n",
    "\n",
    "\n",
    "\n",
    "        mpz = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection14[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mpz.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 19,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mpz=pd.DataFrame(mpz)\n",
    "        #print(pd.DataFrame(mpz))\n",
    "\n",
    "        # Concatenate the dataframes into one\n",
    "        combined_dataframe = pd.concat([nc3, mc3, nc4, mc4, np3, mp3, np4, mp4, nfz, mfz, ncz, mcz, npz, mpz])\n",
    "        print(combined_dataframe.head())\n",
    "        combined_dataframe.to_csv(r\"C:\\Users\\barle\\Downloads/combined_df2.csv\", index = False)\n",
    "        #INDICIES FOR CHANNELS: 5=C3, 6=C4,7=P3,  8=P4, Fz=17, Cz=18, Pz=19\n",
    "\n",
    "\n",
    "# uncomment this to try out the function, of course the filepath can be changed, and so can the desired sample duration (in seconds)\n",
    "a = preprocess_raw(4, filepath=r\"C:\\Users\\barle\\Downloads/AusEC.edf\")        \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "<class 'pandas.core.series.Series'>\n",
      "0.5\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    " numpy as np\n",
    "%matplotlib qt\n",
    "%matplotlib inline\n",
    "import pandas as pd\n",
    "import umap ###install with \"pip install umap-learn\"\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.metrics import accuracy_score,confusion_matrix\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.cluster import AgglomerativeClustering\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns ### install using pip install seaborn\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.svm import SVC\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "import umap ###install with \"pip install umap-learn\"\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.metrics import accuracy_score,confusion_matrix\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.cluster import AgglomerativeClustering\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns ### install using pip install seaborn\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "import umap \n",
    "#!pip install umap-learn\n",
    "\n",
    "#This class takes in a pandas dataframe - which is also the output of the preprocess_raw function. This class is designed to enable machine \n",
    "#learning algorithms to be performed on the dataset. The attributes of the class split the dataset into the target variables (\"condition\" and \"time\" which are basically providing the same information since\n",
    "# the 1st half of the recording is condition 0, and the second half is condition 1) in the first columns, and the features in the later columns. \n",
    "class complete_dataset:\n",
    "    # demo loads, manipulates, and analyzes a given dataset\n",
    "    def __init__(self, csv):\n",
    "        self.data = csv.drop(['time','condition'], axis=1) \n",
    "        self.target = csv['condition']    \n",
    "        print(type(self.data))\n",
    "        print(type(self.target))\n",
    "        \n",
    "        #IGNORE THIS CODE SEGMENT BELOW (IT IS OTHER CODE THAT MIGHT BE UNCOMMENTED AT LATER EDITIONS TO TWEAK DATATYPES USED OR OTHER ASPECTS)\n",
    "        #csv =df  #pd.read_csv(csv)\n",
    "        #df=pd.DataFrame(csv)\n",
    "        #csv = numpy.array() \n",
    "        #self.target = df.iloc[:, 2] #Getting rid of 'condition' and 'time' as columns since both are main predictors typically put as cols 1&2\n",
    "        ###self.target =  pd.DataFrame(df.iloc[:, 2])\n",
    "        #self.data = df.iloc[:, 2:]\n",
    "        #####self.data =  pd.DataFrame(df.iloc[:, 2:])\n",
    "        #print(type(self.target))\n",
    "        #y = pd.DataFrame(data)\n",
    "        # dataset = combined_dataframe\n",
    "        #data = dataset.drop(['time','condition'], axis=1)\n",
    "        #X = dataset.drop(['time', 'condition'], axis=1)\n",
    "        #print(X)\n",
    "        #print(X.shape)\n",
    "        #labels = dataset['condition']               \n",
    "\n",
    "        \n",
    "    # Methods-----------------------------------------------\n",
    "    \n",
    "    #this method allows for scaling the data\n",
    "    def scale(self):\n",
    "        # We don't expect our data to be Gaussian, so let's use normalization\n",
    "        min_val = self.data.min().min()\n",
    "        max_val = self.data.max().max()\n",
    "        self.scaled_data = (self.data - min_val) / (max_val - min_val)\n",
    "        return self.scaled_data\n",
    "    \n",
    "    #this method allows for dimensionally reducing the data using UMAP and then printing a plot showing clusters within the data in 2 dimensions\n",
    "    def umap(self):\n",
    "        cluster_labels = model.fit_predict(self.scaled_data)\n",
    "        #first, I will reduce dimensions with UMAP so we look at things on a 2-D plane \n",
    "        #(much easier for humans to visualize) \n",
    "        data_reducer = umap.UMAP()\n",
    "        umap_data = data_reducer.fit_transform(scaled_data)\n",
    "        scaled_umap_data = scaler.fit_transform(umap_data)\n",
    "        # add back to a dataframe because it's easier to keep track of things that way \n",
    "        #(all indices and columns have names that we can reference)\n",
    "        reduced_dataset = pd.DataFrame(scaled_umap_data,columns=['Dim. #1', 'Dim. #2'])\n",
    "        #add in our clustering labels from hierarchical clustering \n",
    "        reduced_dataset['cluster_labels'] = cluster_labels\n",
    "        #print(reduced_dataset)\n",
    "        import seaborn as sns\n",
    "        sns.scatterplot(x='Dim. #1', y='Dim. #2',\n",
    "                    hue='cluster_labels', data=reduced_dataset)\n",
    "\n",
    "    #this method performs SVM classification on the data, starting with stratifying the data with splits for cross validation, and subsequently \n",
    "    #printing a confusion matrix showing the results\n",
    "    def svm2(self, C=100, kern='rbf', splits=5, gamma=.1):\n",
    "        svm_model = SVC(kernel='linear')\n",
    "        #svmfit = SVC(kernel=kern).fit(self.data.values, self.target.values)\n",
    "        skf = StratifiedKFold(n_splits=splits)\n",
    "        accuracy = 0\n",
    "        all_feature_importances = np.zeros(11) #len(self.data.columns)\n",
    "        all_labels = []\n",
    "        all_predictions = []\n",
    "        for train_index, test_index in skf.split(self.data.values, self.target.values):\n",
    "            X_train, y_train = self.data.values[train_index], self.target.values[train_index] #''' training dataset '''\n",
    "            X_test, y_test = self.data.values[test_index], self.target.values[test_index] #''' testing dataset '''\n",
    "            svm_model.fit(X_train,y_train)\n",
    "            #all_feature_importances += svm_model.feature_importances_\n",
    "            predictions = svm_model.predict(X_test)\n",
    "            all_predictions.extend(predictions)        \n",
    "            #''' Use extend function to add the new labels onto the list of labels'''\n",
    "            all_labels.extend(y_test)\n",
    "            accuracy += accuracy_score(predictions,y_test)    \n",
    "        cm = confusion_matrix(all_labels,all_predictions,normalize= 'true')#here, I input the labels and predictions into the Scikit learn confusion_matrix function and theywill generate a confusion matrix for me\n",
    "        df_cm = pd.DataFrame(cm,index=[0,1],columns=[0,1])#turn it into a dataframe so seaborn will label the graph using the columns/indicies of the df'''\n",
    "        sns.heatmap(df_cm, annot=True)#graph using seaborn heatmap function - annot=True so labels will appear'''\n",
    "        \n",
    "        #BELOW IS CODE COPIED FROM RF FUNCTION - to do a feature importances table, however, so far have not been able to get it working for SVM\n",
    "        #'' now, I will plot the feature importances so we can decide\n",
    "        #what to do based on our excellent accuracy!'''\n",
    "        #plt.figure(figsize = (15,10))#make the figure a little bigger '''\n",
    "        #''' use matplotlib's bar graph function to graph feature importances\n",
    "        #X axis = feature name\n",
    "        #y axis = feature importance values\n",
    "        #'''\n",
    "        #plt.bar(list(self.data.columns),all_feature_importances/splits, color ='maroon',  width = 0.4) \n",
    "        #plt.title('Feature Importances')\n",
    "        from sklearn.model_selection import GridSearchCV \n",
    "  \n",
    "        #Doing GRID SEARCH FOR SVC:  Can Turn this on by uncommenting the below code if desired\n",
    "        #defining parameter range \n",
    "        #param_grid = {'C': [0.1, 1, 10, 100, 1000],  \n",
    "        #      'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n",
    "        #      'kernel': ['rbf']}  \n",
    "  \n",
    "        #grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3) \n",
    "        # fitting the model for grid search \n",
    "        #grid.fit(X_train, y_train) \n",
    "        # print best parameter after tuning \n",
    "        #print(grid.best_params_)  \n",
    "        # print how our model looks after hyper-parameter tuning \n",
    "        #print(grid.best_estimator_) \n",
    "        return accuracy/splits #, print(), print('ALL LABELS'), print(all_labels), print(), print('ALL PREDICTIONS'), print(all_predictions)\n",
    "    \n",
    "    #this method performs Random Forest classification on the data, starting with stratifying the data with splits for cross validation, and subsequently \n",
    "    #printing a confusion matrix showing the results, as well as a feature importance table\n",
    "    def rand_for(self, n_est = 25, crit = 'gini', splits=5):\n",
    "        rf_model = RandomForestClassifier(n_estimators = n_est,  criterion=crit)\n",
    "        skf = StratifiedKFold(n_splits=splits)\n",
    "        accuracy = 0\n",
    "        all_feature_importances = np.zeros(11) #len(self.data.columns)\n",
    "        all_labels = []\n",
    "        all_predictions = []\n",
    "        for train_index, test_index in skf.split(self.data.values, self.target.values): \n",
    "            X_train, y_train = self.data.values[train_index], self.target.values[train_index]    #''' training dataset '''\n",
    "            X_test, y_test = self.data.values[test_index], self.target.values[test_index]\n",
    "            rf_model.fit(X_train,y_train)\n",
    "            #''' add the new feature importances to the current FI vlues'''\n",
    "            all_feature_importances += rf_model.feature_importances_\n",
    "            predictions = rf_model.predict(X_test)\n",
    "            #''' Use extend function to add the new predictions onto thelist of predictions'''\n",
    "            all_predictions.extend(predictions)        \n",
    "            #''' Use extend function to add the new labels onto the list of labels'''\n",
    "            all_labels.extend(y_test)\n",
    "            accuracy += accuracy_score(predictions,y_test)\n",
    "            #return accuracy/5\n",
    "            \n",
    "        cm = confusion_matrix(all_labels,all_predictions,normalize= 'true')#using labels and predictions into the Scikit learn confusion_matrix function - they generate a confusion matrix\n",
    "        df_cm = pd.DataFrame(cm,index=[0,1],columns=[0,1])#turn it into a dataframe so seaborn will label the graph using the columns/indicies of the df\n",
    "        sns.heatmap(df_cm, annot=True)#graph using seaborn heatmap function - annot=True so labels will appear\n",
    "        #plot the feature importances so we can decide which are most important (while also taking into account overall accuracy scores)!\n",
    "        plt.figure(figsize = (15,10))#make the figure a little bigger\n",
    "        #use matplotlib's bar graph function to graph feature importances\n",
    "        #X axis = feature name\n",
    "        #y axis = feature importance values\n",
    "        plt.bar(list(self.data.columns),all_feature_importances/splits, color ='maroon',  width = 0.4) \n",
    "        plt.title('Feature Importances')\n",
    "        return accuracy/splits \n",
    "\n",
    "    #This function performs a grid search for the best indicies of a random forest\n",
    "    def grid_search(self, n_est = 25, crit = 'gini'):\n",
    "        rf_model = RandomForestClassifier(n_estimators = n_est,  criterion=crit)\n",
    "        parameters = {'n_estimators':(25, 50,75,100,120,1000), 'criterion':['gini', 'entropy']}\n",
    "        self.clf = GridSearchCV(rf_model, parameters)\n",
    "        self.clf.fit(dataset.values,labels)     # HAS NO VALUES OR LABELS HERE!!!!\n",
    "        return clf.best_params_, clf.best_score_ \n",
    "   \n",
    "        \n",
    "########  ----------------------------------------------------------\n",
    "\n",
    "#These are some example commands to begin using this complete dataset class: \n",
    "\n",
    "#If starting from a csv, use this function:\n",
    "data1 = pd.read_csv(r\"C:\\Users\\barle\\Downloads/combined_df2.csv\")\n",
    "data2 = complete_dataset(data1)\n",
    "#print(type(data1))\n",
    "\n",
    "\n",
    "#To scale the data\n",
    "#data3 = data2.scale()\n",
    "#print(type(data3))\n",
    "#print(data3)\n",
    "\n",
    "\n",
    "#The below code performs dimensionality reduction using UMAP, and prints 2D clustering table\n",
    "#dimred = data2.umap()\n",
    "#print(dimred)\n",
    "\n",
    "\n",
    "\n",
    "#The below code performs SVM classification, and prints out confusion matrix\n",
    "#svvmm = data2.svm2(splits=5)\n",
    "#print(svvmm)\n",
    "\n",
    "\n",
    "\n",
    "#The below code performs random forest grid search, and prints out results\n",
    "#gs = data1.grid_search()\n",
    "#print(gs)\n",
    "\n",
    "\n",
    "#The below code performs random forest classification, and prints out confusion matrix as well as a feature importance table\n",
    "#rf = data2.rand_for()\n",
    "#print(rf)\n",
    "\n",
    "\n",
    "\n",
    "#The below generates an error since the scaling method or scaling in itself is not compatible with later methods of the function\n",
    "#scaled_data = data2.scale()\n",
    "#print(type(data3))\n",
    "#print((scaled_data))\n",
    "#data3 = complete_dataset(scaled_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2288712c7f0>"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
