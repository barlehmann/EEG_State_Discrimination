{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting EDF parameters from C:\\Users\\barle\\Downloads\\AusEC.edf...\n",
      "EDF file detected\n",
      "Setting channel info structure...\n",
      "Creating raw.info structure...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: Invalid requirement: '#'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "512.0\n",
      "92160.0\n",
      "   condition  time  channel_index  svd_entropy  perm_entropy  spec_entropy  \\\n",
      "0          0     0              5     0.290635      0.747470      0.330568   \n",
      "1          0     3              5     0.462830      0.731450      0.534002   \n",
      "2          0     6              5     0.469692      0.740864      0.546127   \n",
      "3          0     9              5     0.456089      0.745474      0.501053   \n",
      "4          0    12              5     0.408070      0.734976      0.476219   \n",
      "\n",
      "   app_entropy  sample_entropy  lziv_complexity  petrosian_fd   katz_fd  \\\n",
      "0     0.395512        0.347203         0.019531      1.010329  2.082890   \n",
      "1     0.650382        0.613578         0.019531      1.010061  1.958157   \n",
      "2     0.666399        0.653226         0.019531      1.010276  2.484317   \n",
      "3     0.657425        0.611374         0.019531      1.010276  2.013166   \n",
      "4     0.585648        0.538337         0.019531      1.009793  2.113451   \n",
      "\n",
      "   higuchi_fd  detrended_fluctuation  \n",
      "0    1.361935               1.455604  \n",
      "1    1.396887               1.199836  \n",
      "2    1.435803               1.244653  \n",
      "3    1.392394               1.321227  \n",
      "4    1.358790               1.388244  \n"
     ]
    }
   ],
   "source": [
    "!pip install -U mne # with -U means latest STABLE version!\n",
    "#%matplotlib qt\n",
    "import os.path as op\n",
    "import os\n",
    "import numpy as np\n",
    "import mne\n",
    "from mne.time_frequency import tfr_morlet, psd_multitaper, psd_welch\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from pandas import ExcelWriter\n",
    "from pandas import ExcelFile\n",
    "from pydoc import help\n",
    "from scipy.stats.stats import pearsonr\n",
    "from scipy import linalg\n",
    "from mne import io\n",
    "from mne.connectivity import spectral_connectivity\n",
    "from mne.datasets import sample\n",
    "from mne.viz import plot_sensors_connectivity\n",
    "from entropy import *\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "#This class is for iterating through the raw data and extracting a set of 10 complexity features over a specified seconds_per_sample argument that sets how many seconds \n",
    "# (or samples) are fed into the complexity functions to be put into the final dataframe that will be analysed with later functions.\n",
    "class preprocess_raw:\n",
    "    def __init__(self, seconds_per_sample, filepath=r\"C:\\Users\\barle\\Downloads/AusEC.edf\"):\n",
    "        #For the filepath, it is for the raw data - one can use this as guideline for filepath on a windows pc: raw = mne.io.read_raw_edf(r\"C:\\Users\\barle\\Downloads/AusEC.edf\") \n",
    "        \n",
    "        #Creating basic variables to be used and accessed relating to raw data, its montage (channel settings), channel names, etc.\n",
    "        raw = mne.io.read_raw_edf(filepath)\n",
    "        data = raw.get_data()\n",
    "    \n",
    "        # Below are needed variables in order to streamline this preprocessing class to different EEG recording durations (in seconds)\n",
    "        # More specifically this ensures that feature extraction will be able to loop through a correct number of samples and that remainders \n",
    "        # will not cause any issues\n",
    "        sample_width = seconds_per_sample*raw.info['sfreq']\n",
    "        remainder = len(data.T[:,1])%sample_width\n",
    "        print(remainder)\n",
    "        final_num_samples = len(data.T[:,1]) - remainder \n",
    "        print(final_num_samples)\n",
    "        #CORRECT **NEW** SAMPLE NUMBER  = final_num_samples / sample_width\n",
    "        num_of_new_samples = final_num_samples/sample_width\n",
    "        new_total_duration_seconds = num_of_new_samples / raw.info['sfreq']\n",
    "        new_half_duration_seconds = new_total_duration_seconds / 2\n",
    "        \n",
    "        \n",
    "        # Setting the needed variables to segment two halfs of the data as sample_starts and sample_starts which designate the partitions of \n",
    "        # condition 1 and condition 2 and subsequently creating separate raw selections for designated channels and start and stop times\n",
    "        sampling_freq = raw.info['sfreq']\n",
    "        start_stop_seconds1 = np.array([0, ((len(raw)/sampling_freq)/2)]) #print(len(raw)) # = 92672 / 256 = 362 seconds total / 60  = 6 minutes\n",
    "        start_stop_seconds2 = np.array([((len(raw)/sampling_freq)/2),((len(raw)/sampling_freq))])\n",
    "        start_sample1, stop_sample1 = (start_stop_seconds1 * sampling_freq).astype(int)\n",
    "        start_sample2, stop_sample2 = (start_stop_seconds2 * sampling_freq).astype(int)\n",
    "        channel_index1 = 1\n",
    "        channel_index2 = 1\n",
    "        channel_index3 = 2\n",
    "        channel_index4 = 2\n",
    "        channel_index5 = 3\n",
    "        channel_index6 = 3\n",
    "        channel_index7 = 4\n",
    "        channel_index8 = 4\n",
    "        channel_index9 = 5\n",
    "        channel_index10 = 5\n",
    "        channel_index11= 11\n",
    "        channel_index12 = 11\n",
    "        channel_index13 = 12\n",
    "        channel_index14 = 12\n",
    "        raw_selection1 = data[channel_index1, start_sample1:stop_sample1]\n",
    "        raw_selection2 = data[channel_index2, start_sample2:stop_sample2]\n",
    "        raw_selection3 = data[channel_index3, start_sample1:stop_sample1]\n",
    "        raw_selection4 = data[channel_index4, start_sample1:stop_sample2]\n",
    "        raw_selection5 = data[channel_index5, start_sample1:stop_sample1]\n",
    "        raw_selection6 = data[channel_index6, start_sample1:stop_sample2]\n",
    "        raw_selection7 = data[channel_index7, start_sample1:stop_sample1]\n",
    "        raw_selection8 = data[channel_index8, start_sample1:stop_sample2]\n",
    "        raw_selection9 = data[channel_index9, start_sample1:stop_sample1]\n",
    "        raw_selection10 = data[channel_index10, start_sample1:stop_sample2]\n",
    "        raw_selection11 = data[channel_index11, start_sample1:stop_sample1]\n",
    "        raw_selection12 = data[channel_index12, start_sample1:stop_sample2]\n",
    "        raw_selection13 = data[channel_index13, start_sample1:stop_sample1]\n",
    "        raw_selection14 = data[channel_index14, start_sample1:stop_sample2]\n",
    "\n",
    "        #Below is a bit of additional output for the test file verifying that what is expected to be found has indeed been found related to \n",
    "        #the time durations of a dataset \n",
    "        #print(len(raw)) # = 92672 / 256 = 362 seconds total / 60  = 6 minutes\n",
    "        #print(len(data.T)) # = 92672 / 256 = 362 seconds total / 60  = 6 minutes\n",
    "        #print(len(data.T[:,1])) # = 92672 / 256 = 362 seconds total / 60  = 6 minutes\n",
    "\n",
    "        \n",
    "        \n",
    "        #INDICIES FOR OPTIMAL CHANNELS: 5=C3, 6=C4,7=P3,  8=P4, Fz=17, Cz=18, Pz=19\n",
    "        #These channels are optimal due to their being least likely to be contaminated with artifact\n",
    "\n",
    "\n",
    "        #Below are a set of loops for each channel and each condition which iterate through the sample width and extract the complexity data to create\n",
    "        #the new dataset/dataframe containing these features\n",
    "        #*********************************************************************C3*********************************************************************\n",
    "        nc3 = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection1[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #Below are a few commented commands that helped to test taht the function is working correctly - please ignore if not working on changing this loop \n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            nc3.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 5,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        nc3 = pd.DataFrame(nc3)\n",
    "        #print(pd.DataFrame(nc3))\n",
    "\n",
    "\n",
    "\n",
    "        mc3 = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection2[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mc3.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 5,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mc3 = pd.DataFrame(mc3)\n",
    "        #print(pd.DataFrame(mc3))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************C4*********************************************************************\n",
    "\n",
    "\n",
    "\n",
    "        nc4 = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection3[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            nc4.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 6,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        nc4=pd.DataFrame(nc4)\n",
    "        #print(pd.DataFrame(np3))\n",
    "\n",
    "\n",
    "\n",
    "        mc4 = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection4[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mc4.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 6,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mc4=pd.DataFrame(mc4)\n",
    "        #print(pd.DataFrame(mp3))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************P3*********************************************************************\n",
    "\n",
    "        np3 = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection5[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            np3.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 7,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        np3=pd.DataFrame(np3)\n",
    "        #print(pd.DataFrame(np3))\n",
    "\n",
    "\n",
    "\n",
    "        mp3 = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection6[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mp3.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 7,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mp3=pd.DataFrame(mp3)\n",
    "        #print(pd.DataFrame(mp3))\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************P4*********************************************************************\n",
    "\n",
    "        np4 = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection7[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            np4.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 8,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        np4=pd.DataFrame(np4)\n",
    "        #print(pd.DataFrame(np4))\n",
    "\n",
    "\n",
    "\n",
    "        mp4 = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection8[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mp4.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 8,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mp4=pd.DataFrame(mp4)\n",
    "        #print(pd.DataFrame(mp4))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************FZ*********************************************************************\n",
    "\n",
    "        nfz = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection9[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            nfz.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 17,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        nfz=pd.DataFrame(nfz)\n",
    "        #print(pd.DataFrame(nfz))\n",
    "\n",
    "\n",
    "\n",
    "        mfz = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection10[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mfz.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 17,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mfz=pd.DataFrame(mfz)\n",
    "        #print(pd.DataFrame(mfz))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************CZ*********************************************************************\n",
    "\n",
    "        ncz = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection11[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            ncz.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 18,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        ncz=pd.DataFrame(ncz)\n",
    "        #print(pd.DataFrame(ncz))\n",
    "\n",
    "\n",
    "\n",
    "        mcz = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection12[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mcz.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 18,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mcz=pd.DataFrame(mcz)\n",
    "        #print(pd.DataFrame(mcz))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        #*********************************************************************FZ*********************************************************************\n",
    "\n",
    "        npz = []\n",
    "        j=0\n",
    "        total_samples_container = 0\n",
    "        for i in range(int(num_of_new_samples/2)):\n",
    "            sw = j+sample_width\n",
    "            bin_iteration = raw_selection13[j:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            j += int(sample_width)\n",
    "            #custom_raw = mne.io.RawArray(bin_iteration, info)\n",
    "            #print(custom_raw)\n",
    "            #list1 = mne.time_frequency.psd_welch(raw_selection1, fmin=8, fmax=12, tmin=0, tmax=3, n_fft=256, n_overlap=0, n_per_seg=3, picks=None, proj=False, n_jobs=1, reject_by_annotation=True, average='mean', verbose=None)\n",
    "            #list_alpha=list1[1,1]\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            npz.append(\n",
    "                {\n",
    "                    'condition': 0,\n",
    "                    'time': 3*i,\n",
    "                    #'alpha_amp': list1,\n",
    "                    'channel_index': 19,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        npz=pd.DataFrame(npz)\n",
    "        #print(pd.DataFrame(npz))\n",
    "\n",
    "\n",
    "\n",
    "        mpz = []\n",
    "        p=0\n",
    "        z=0\n",
    "        total_samples_container = 0          \n",
    "        for f in range(int(num_of_new_samples/2)):\n",
    "            sw = p+sample_width\n",
    "            bin_iteration = raw_selection14[p:int(sw)]\n",
    "            total_samples_container += sum(bin_iteration)\n",
    "            p += int(sample_width)\n",
    "            #print(svd_entropy(bin_iteration, order=3, delay=1, normalize=True))\n",
    "            mpz.append(\n",
    "                {\n",
    "                    'condition': 1,\n",
    "                    'time': 3*f+180,\n",
    "                    'channel_index': 19,\n",
    "                    #'avg_alpha_amplitude': o/5,\n",
    "                    'svd_entropy': (svd_entropy(bin_iteration, order=3, delay=1, normalize=True)),\n",
    "                    'perm_entropy': (perm_entropy(bin_iteration, order=3, normalize=True)),\n",
    "                    'spec_entropy':(spectral_entropy(bin_iteration, 100, method='welch', normalize=True)), # Spectral entropy CANNOT USE RAW - MUST USE RAW SELECTION FOR SOME REASON!!!!\n",
    "                    'app_entropy':(app_entropy(bin_iteration, order=2, metric='chebyshev')),              # Approximate entropy\n",
    "                    'sample_entropy':(sample_entropy(bin_iteration, order=2, metric='chebyshev')),           # Sample entropy\n",
    "                    'lziv_complexity':(lziv_complexity(bin_iteration, normalize=True)),        # Lempel-Ziv complexity\n",
    "                    'petrosian_fd':(petrosian_fd(bin_iteration)),            # Petrosian fractal dimension\n",
    "                    'katz_fd':(katz_fd(bin_iteration)),                 # Katz fractal dimension\n",
    "                    'higuchi_fd':(higuchi_fd(bin_iteration, kmax=10)),     # Higuchi fractal dimension\n",
    "                    'detrended_fluctuation':(detrended_fluctuation(bin_iteration))   # Detrended fluctuation analysis\n",
    "                }\n",
    "            )\n",
    "\n",
    "            total_samples_container = 0\n",
    "        mpz=pd.DataFrame(mpz)\n",
    "        #print(pd.DataFrame(mpz))\n",
    "\n",
    "        # Concatenate the dataframes into one\n",
    "        combined_dataframe = pd.concat([nc3, mc3, nc4, mc4, np3, mp3, np4, mp4, nfz, mfz, ncz, mcz, npz, mpz])\n",
    "        print(combined_dataframe.head())\n",
    "        combined_dataframe.to_csv(r\"C:\\Users\\barle\\Downloads/combined_df2.csv\", index = False)\n",
    "        #INDICIES FOR CHANNELS: 5=C3, 6=C4,7=P3,  8=P4, Fz=17, Cz=18, Pz=19\n",
    "\n",
    "\n",
    "# uncomment this to try out the function, of course the filepath can be changed, and so can the desired sample duration (in seconds)\n",
    "a = preprocess_raw(4, filepath=r\"C:\\Users\\barle\\Downloads/AusEC.edf\")        \n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
